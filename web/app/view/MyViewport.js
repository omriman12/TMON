/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.selection.CheckboxModel'
]);
var sm = Ext.create('Ext.selection.CheckboxModel');

Ext.define('MyApp.view.MyViewport', {
        extend: 'Ext.container.Viewport',

    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;
        
        function Handler1(value) { 
              return '<span style="color:' + '#73b51e' + ';">' + value + '</span>';
        };
        
        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    region: 'west',
                    id: 'MenuPanelID',
                    width: 255,
                    layout: {
                        type: 'accordion'
                    },
                    collapsed: true,
                    collapsible: true,
                    title: 'תפריט',
                    
                    items: [
                        {
                            xtype: 'form',
                            width: 148,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            collapsed: false,
                            title: 'מחירונים',
                            dockedItems: [
                                {
                                    xtype: 'textfield',
                                    flex: 1,
                                    dock: 'top',
                                    id: 'txtPrefixID',
                                    margin: 10,
                                    fieldLabel: 'Prefix',
                                    labelWidth: 100
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'vendor_name',
                                    typeAhead: true,
                                    typeAheadDelay: 50,
                                    mode: 'local',
                                    triggerAction: 'all',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor',
                                    margin: 10,
                                    id: 'txtVendorID',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'vendor_name'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: 'GetVendors.jsp',
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        select: function(combo, selection) {
                                            if (combo.getValue()) {
                                                Ext.getCmp('txtPricesVendorQuality').getStore().getProxy().url =  'GetVendorQuality.jsp?' + Ext.urlEncode({'bid_vendor': combo.getValue()});
                                                Ext.getCmp('txtPricesVendorQuality').getStore().reload();
                                            }
                                        },
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'vendor_name',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'rate_desc',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
//                                    emptyText:'Choose Quality...',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor Quality',
                                    margin: 10,
                                    id: 'txtPricesVendorQuality',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'rate_desc'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: '', 
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'rate_desc',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'direction',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
//                                    emptyText:'Choose vendor...',
                                    selectOnFocus:true,
                                    fieldLabel: 'Direction',
                                    margin: 10,
                                    id: 'txtPricesDirection',
                                    labelWidth: 100,
                                    store: new Ext.data.SimpleStore({
                                        fields: ['direction'],
                                        data : [
                                            ['IN'],
                                            ['OUT']
                                        ]
                                    }),
                                    listeners: {
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'direction',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },  
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    dock: 'top',
                                    margin: 10,
                                    text: 'חפש',
                                    id: 'prefixSearchExactId',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnPrefixSearchClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    dock: 'top',
                                    margin: 10,
                                    id: 'prefixSearchRangeId',
                                    text: 'חפש טווח',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnPrefixSearchClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'form',
                            width: 148,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            collapsed: false,
                            title: 'הצעות מחיר',
                            dockedItems: [
                                {
                                    xtype: 'combobox',
                                    displayField: 'vendor_name',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
//                                    emptyText:'Choose vendor...',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor Name',
                                    margin: 10,
                                    id: 'txtBidVendor',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'vendor_name'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: 'GetVendors.jsp',
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        select: function(combo, selection) {
                                            if (combo.getValue()) {
                                                Ext.getCmp('txtBidVendorQuality').getStore().getProxy().url =  'GetVendorQuality.jsp?' + Ext.urlEncode({'bid_vendor': combo.getValue()});
                                                Ext.getCmp('txtBidVendorQuality').getStore().reload();
                                            }
                                        },
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'vendor_name',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'rate_desc',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
//                                    emptyText:'Choose Quality...',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor Quality',
                                    margin: 10,
                                    id: 'txtBidVendorQuality',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'rate_desc'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: '', 
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'rate_desc',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    dock: 'top',
                                    margin: 10,
                                    text: 'התחל הצעת מחיר',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnStartBiddingClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
//                                    xtype: 'button',
//                                    flex: 1,
//                                    dock: 'top',
//                                    margin: 10,
//                                    text: 'הצג היסטורית הצעות',
//                                    listeners: {
//                                        click: {
//                                            fn: me.onBtnBiddingHistoryClick,
//                                            scope: me
//                                        }
//                                    }
                                }                                
                            ]
                        },
                        {
                            xtype: 'form',
                            width: 148,
                            layout: {
                                align: 'stretch',
                                type: 'vbox'
                            },
                            collapsed: false,
                            title: 'ראוטים',
                            dockedItems: [
                                {
                                    xtype: 'combobox',
                                    displayField: 'vendor_name',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor',
                                    margin: 10,
                                    id: 'txtRouteVendor',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'vendor_name'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: 'GetVendors.jsp', 
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        select: function(combo, selection) {
                                                if (combo.getValue()) {
                                                    Ext.getCmp('txtRouteVendorQuality').getStore().getProxy().url =  'GetVendorQuality.jsp?' + Ext.urlEncode({'bid_vendor': combo.getValue()});
                                                    Ext.getCmp('txtRouteVendorQuality').getStore().reload();
                                                }
                                        },
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'vendor_name',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'rate_desc',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
                                    selectOnFocus:true,
                                    fieldLabel: 'Vendor Quality',
                                    margin: 10,
                                    id: 'txtRouteVendorQuality',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'rate_desc'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: '', 
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'rate_desc',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    displayField: 'country',
                                    typeAhead: true,
                                    mode: 'local',
                                    triggerAction: 'all',
                                    selectOnFocus:true,
                                    fieldLabel: 'Country',
                                    margin: 10,
                                    id: 'txtRouteCountry',
                                    labelWidth: 100,
                                    store:  Ext.create('Ext.data.Store', {
                                        fields:[
                                            {name: 'country'}
                                        ],
                                        proxy: {
                                            type: 'ajax',
                                            timeout: 120000,
                                            url: 'GetCountries.jsp', 
                                            reader: {
                                                type: 'json',
                                                root: 'data',
                                                successProperty: 'success'
                                            }
                                        },
                                        autoLoad: true
                                    }),
                                    listeners: {
                                        change: function() {
                                            var store = this.store;
                                            store.clearFilter();
                                            
                                            if (this.getValue() !== null){
                                                store.filter({
                                                    property: 'country',
                                                    anyMatch: true,
                                                    value   : this.getValue()
                                                });
                                            }
                                        }
                                    }
                                }, 
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    dock: 'top',
                                    margin: 10,
                                    text: 'חפש',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnRoutesSearchClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    flex: 1,
                                    dock: 'top',
                                    margin: 10,
                                    text: 'הוסף',
                                    listeners: {
                                        click: {
                                            fn: me.onBtnRoutesAddClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }                        
                    ]
                },
                {
                    xtype: 'tabpanel',
                    region: 'center',
                    id: 'MainTabPanelID',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            layout: {
                                type: 'border'
                            },
                            title: 'General',
                            dockedItems: [
                                {
                                    xtype: 'toolbar',
                                    dock: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'btnRefreshId',
                                            icon: 'images/refresh16x16.png',
                                            text: 'רענון',
                                            listeners: {
                                                click: {
                                                    fn: function(button, e, options) {
                                                        var grid = Ext.getCmp('OutGoingGridId');
                                                        grid.getStore().reload();
                                                        var grid2 = Ext.getCmp('IncomingGridId');
                                                        grid2.getStore().reload();
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            items: [
                                {
                                    xtype: 'container',
                                    region: 'center',
                                    layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                    },
                                    items: [
                                        {
                                            xtype: 'gridpanel',
                                            flex: 1,
                                            autoScroll: true,
                                            title: 'שיחות נכנסות',
                                            store: 'IncomingDataStore',
                                            viewConfig: {
                                                id: 'IncomingGridId'
                                            },
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'trunk_owner',
                                                    text: 'Owner'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'country_name',
                                                    text: 'Country'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'country_code',
                                                    text: 'Code'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    align: 'right',
                                                    dataIndex: 'operator_prefix',
                                                    text: 'Operator Prefix',
                                                    format: '00'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    align: 'right',
                                                    dataIndex: 'call_duration',
                                                    text: 'Duration Hourly',
//                                                    format: '0,000'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    align: 'right',
                                                    dataIndex: 'acd',
                                                    text: 'ACD Hourly'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    align: 'right',
                                                    dataIndex: 'asr',
                                                    text: 'ASR Hourly'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    align: 'right',
                                                    dataIndex: 'calls',
                                                    text: 'Calls Hourly',
                                                    format: '0,000'
                                                }
                                            ],
                                            listeners:  {
                                                celldblclick: {
                                                    fn: me.onIncomingGridpanelCellDblClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'gridpanel',
                                            flex: 2,
                                            autoScroll: true,
                                            title: 'שיחות יוצאת',
                                            store: 'OutgoingDataStore',
                                            viewConfig: {
                                                getRowClass: function(record, rowIndex, rowParams, store) {
                                                    var acd_h = record.get('acd_h');
                                                    var acd_m = record.get('acd_m');

                                                    //console.log('Cheking!!! ACD_H:' + acd_h + ' < ACD_M:' + acd_m);

                                                    if (acd_h < acd_m - 1){
                                                        return 'price-fall';
                                                    }

                                                },
                                                draggable: false,
                                                id: 'OutGoingGridId'
                                            },
                                            columns: [
                                                {
                                                    xtype: 'gridcolumn',
                                                    dataIndex: 'country_name',
                                                    text: 'Country'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    width: 50,
                                                    align: 'right',
                                                    dataIndex: 'country_code',
                                                    text: 'Code',
                                                    format: '0,000'
                                                },
                                                {
                                                    xtype: 'numbercolumn',
                                                    width: 100,
                                                    align: 'right',
                                                    dataIndex: 'operator_prefix',
                                                    text: 'Operator Prefix',
                                                    format: '00'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'call_duration_h',
                                                    text: 'Duration Hourly',
//                                                    renderer : 
//                                                        function(value) {
////                                                        if (value*(-1) > 0) {
////                                                            return '<span style="color:' + '#73b51e' + ';">' + value + '</span>';
////                                                        } else if (value*(-1) < 0) {
////                                                            return '<span style="color:' + '#cf4c35' + ';">' + value + '</span>';
////                                                        }
//                                                        return Handler1(value);}
                                                   
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'call_duration_m',
                                                    text: 'Duration Monthly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    hidden: true,
                                                    dataIndex: 'priority',
                                                    text: 'Priority'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'acd_h',
                                                    text: 'ACD Hourly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'acd_m',
                                                    text: 'ACD Monthly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'asr_h',
                                                    text: 'ASR Hourly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'asr_m',
                                                    text: 'ASR Monthly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'calls_h',
                                                    text: 'Calls hourly'
                                                },
                                                {
                                                    xtype: 'gridcolumn',
                                                    align: 'right',
                                                    dataIndex: 'calls_m',
                                                    text: 'Calls Monthly'
                                                }
                                            ],
                                            listeners: {
                                                celldblclick: {
                                                    fn: me.onOutcomingGridpanelCellDblClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onBtnPrefixSearchClick: function(button, event) {
        var checkBoxPrefixes = Ext.create('Ext.selection.CheckboxModel');
        var prefix = Ext.getCmp('txtPrefixID').value;
        var vendor = Ext.getCmp('txtVendorID').value;
        var direction = Ext.getCmp('txtPricesDirection').value;
        var vendorQuality = Ext.getCmp('txtPricesVendorQuality').value;

        var v_url = 'GetCountryPrefixes.jsp?' + Ext.urlEncode({'prefix': prefix, 'vendor': vendor, 'direction':direction, 'vendor_quality': vendorQuality, 'action': button.id});
        var me = this;
        var randomNum =Math.floor((Math.random()*10000));

        if(direction === null){ //
            alert('Insert Direction');
        }
        else{
            var newTab = Ext.create('Ext.panel.Panel', {
//            id: 'prefix_panel',
            title: 'Rates For Prefix ' + prefix,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
//                            id: 'buttonBiding',
                            icon: 'images/dollar16x16.png',
                            text: 'הוסף להצעת מחיר',
                            listeners: {
                                click: {
                                    fn: function(button, e, options){
//                                        var me = this;
                                        var grid = Ext.getCmp('prefix_grid' +randomNum);
                                        var checkboxSelection = grid.getSelectionModel().getSelection();
                                        var temp = '';
                                        for (i=0; i<=checkboxSelection.length-1; i++){
                                            temp = temp + checkboxSelection[i].get('price_date').substring(0,10) + "," + 
                                                          checkboxSelection[i].get('vendor_name') + "," + 
                                                          checkboxSelection[i].get('country_code') + "," +
                                                          checkboxSelection[i].get('prefix') + "," +
                                                          checkboxSelection[i].get('currency') + "," +
                                                          checkboxSelection[i].get('rate') + "," +
                                                          checkboxSelection[i].get('quality') + "," +
                                                          checkboxSelection[i].get('direction') +
                                                            ";";
                                        }

                                        Ext.Ajax.request({
                                            url: 'AjaxActions.jsp',
                                            method : 'Post', 
                                            params: {
                                                action: 'add_to_bid',
                                                grid_vars: temp
                                            }
                                        });
                                        
//                                        if(typeof Ext.getCmp('bidding_grid') === 'undefined'){ 
//                                            alert('Please start a bid first!');
//                                        }
//                                        else{
//                                            Ext.getCmp('bidding_grid').getStore().reload();
                                            alert('Added to bid');
//                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            items:  [{
                id: 'prefix_grid' +randomNum,
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                selModel: checkBoxPrefixes,
                store:  Ext.create('Ext.data.Store', {
                    fields: [
                        /*
                    {name: 'trunk_owner'},
                    {name: 'prefix', type: 'int', sortType: 'asInt'},
                    {name: 'rate', type: 'float', sortType: 'asFloat'},
                    {name: 'currency'},
                    {name: 'acd', type: 'int', sortType: 'asInt'},
                    {name: 'asr', type: 'int', sortType: 'asInt'}
                            
                                    "   stat_data,                                      \n" + 
        "   country_code,                                   \n" + 
        "   prefix,                                         \n" + 
        "   operator_desc,                                  \n" + 
        "   vendor_name,                                    \n" + 
        "   rate,                                           \n" + 
        "   currency,                                       \n" + 
        "   minutes,                                        \n" + 
        "   acd,                                            \n" + 
        "   round((100/(calls+cnt2))*calls,2) asr           \n" + 
                            */
                    {name: 'price_date'}, //, type: 'Date' , sortType: 'asDate', format: 'Y-m-d h:M:s'
                    {name: 'country_code',type: 'int', sortType: 'asInt'},
                    {name: 'prefix',type: 'int', sortType: 'asInt'},
                    {name: 'vendor_name'},
                    {name: 'rate', type: 'float', sortType: 'asFloat'},
                    {name: 'currency'},
                    {name: 'direction'},
                    {name: 'quality'},
                    {name: 'duration',type: 'int', sortType: 'asInt'},
                    {name: 'acd', type: 'float', sortType: 'asFloat'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                title: 'Price Reprort for "' + prefix + '" - Monthly' ,
                columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'price_date',
                    width: 80,
                    text: 'Date',
                    renderer: Ext.util.Format.dateRenderer('Y-m-d')
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'country_code',
                    text: 'Counry Code',
                    width: 80
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'prefix',
                    text: 'Prefix',
                    width: 80
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'vendor_name',
                    width: 100,
                    text: 'Vendor Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'currency',
                    width: 100,
                    text: 'Currency'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'rate',
                    width: 50,
                    text: 'Rate'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'direction',
                    width: 60,
                    text: 'Direction'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'quality',
                    width: 100,
                    text: 'Quality'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'duration',
                    width: 100,
                    text: 'Duration'                    
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'acd',
                    width: 100,
                    text: 'ACD'
                }
                ]
            }]
        });
            var panel = Ext.getCmp("MainTabPanelID");
    //        panel.remove('prefix_panel');
            panel.add(newTab).show();
        }
    },
        
    onBtnStartBiddingClick: function(button, e, options){
        var me = this;
        var checkBoxBidTab = Ext.create('Ext.selection.CheckboxModel');
        var v_url = 'GetBiddingRows.jsp'; 
        var buyingVendor = Ext.getCmp('txtBidVendor').value;
        var buyingVendorQuality = Ext.getCmp('txtBidVendorQuality').value;
        
        Ext.Ajax.request({
            url: 'AjaxActions.jsp',
            method : 'Post', 
            params: {
                action: 'reset_temp_bid'
            }
        });
        var newTab = Ext.create('Ext.panel.Panel', {
            id: 'bidding_panel',
            title: 'Bidding',
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            
            dockedItems: [
                    {
                        xtype: 'toolbar',
                        dock: 'top',
                        items: [
                              {
                                    xtype: 'button',
                                    id: 'buttonResetBid',
                                    icon: 'images/dollar16x16.png',
                                    text: 'אפס הצעת מחיר',
                                    listeners: {
                                        click: {
                                            fn: function(button, e, options){
                                                Ext.Ajax.request({
                                                    url: 'AjaxActions.jsp',
                                                    method : 'Post', 
                                                    params: {
                                                        action: 'reset_temp_bid'
                                                    }
                                                });
                                                alert('bid eraced');

//                                                var grid = Ext.getCmp('bidding_grid');
//                                                grid.getStore().reload();

                                            }
                                        }
                                    }
                              },
                              {
                                xtype: 'button',
                                id: 'btnBidHistory',
//                                icon: 'images/refresh16x16.png',
                                text: 'הסטוריה',
                                listeners: {
                                    click: {
                                        fn: me.onBtnBiddingHistoryClick,
                                        scope: me
                                    }
                                }
                              },
                              {
                                xtype: 'button',
                                id: 'btnExportBidToExcel',
//                                icon: 'images/refresh16x16.png',
                                text: 'יצא לאקסל',
                                listeners: {
                                    click: {
                                        fn:  function(button, e, options) {
//                                            Ext.Ajax.request({
//                                                url: 'AjaxActions.jsp',
//                                                method : 'Post', 
//                                                params: {
//                                                    action: 'create_and_send_first_excel'
//                                                }
//                                            });
                                            
                                            Ext.core.DomHelper.append(document.body, {
                                                tag : 'iframe',
                                                id : 'downloadIframe',
                                                frameBorder : 0,
                                                width : 0,
                                                height : 0,
                                                src : 'FileDownloadServlet'
                                            });
//                                            alert("Bid Sent To Email");
                                        }
                                    }
                                }
                              },
                              {
                                    xtype: 'button',
                                    id: 'btnUploadExcelBidId',
                                    icon: 'images/V16x16.png',
                                    text: 'טען הצעה סופית',
                                    listeners: {
                                        click: {
                                            fn:  function(button, e, options) {
                                                Ext.create('Ext.form.Panel', {
                                                    title: 'Upload Bid',
                                                    width: 400,
                                                    id: 'upload_file_panel',
                                                    bodyPadding: 50,
                                                    margin: 300,
                                                    frame: true,
                                                    renderTo: Ext.getBody(),
                                                    items: [{
                                                        xtype: 'filefield',
                                                        name: 'photo',
                                                        fieldLabel: 'Photo',
                                                        labelWidth: 50,
                                                        msgTarget: 'side',
                                                        allowBlank: false,
                                                        anchor: '100%',
                                                        buttonText: 'Select Excel...'
                                                    }],
    
                                                    buttons: [{
                                                        text: 'Upload',
                                                        handler: function() {
                                                            var form = this.up('form').getForm();
                                                            if(form.isValid()){
                                                                alert('starting upload');
                                                                form.submit({
                                                                    url: 'FileUploadServlet?' + Ext.urlEncode({'buying_vendor': buyingVendor, 'buying_vendor_quality': buyingVendorQuality} ),
                                                                    waitMsg: 'Uploading Excel...',
                                                                    waitMsgTarget: true,
                                                                    success: function(fp, o) {
                                                                        Ext.MessageBox.show({
                                                                            closable: false,
                                                                            width:450,
                                                                            title:'<b>Excel Order File Upload Successful!</b>',
                                                                            //msg: response,
                                                                            buttons: Ext.MessageBox.OK,
                                                                            fn: this.showResult,
                                                                            icon: Ext.MessageBox.INFO
                                                                        });
                                                                        form.reset();
                                                                        Ext.getCmp('upload_file_panel').close();
                                                                    },
                                                                    failure: function(fp, o) {
                                                                        Ext.MessageBox.show({
                                                                            closable: false,
                                                                            width:450,
                                                                            title:'<b>Fail To Upload!</b>',
                                                                            //msg: response,
                                                                            buttons: Ext.MessageBox.OK,
                                                                            fn: this.showResult,
                                                                            icon: Ext.MessageBox.INFO
                                                                        });
                                                                        form.reset();
                                                                        Ext.getCmp('upload_file_panel').close();
                                                                    }        
                                                                });
                                                            }
                                                        }
                                                    }]
                                                });
                                            }
                                        }
                                    }
                              }
                              
//                                    {
//                                xtype: 'button',
//                                id: 'btnRefreshBidId',
//                                icon: 'images/refresh16x16.png',
//                                text: 'רענון',
//                                listeners: {
//                                    click: {
//                                        fn:  function(button, e, options) {
//                                            var grid = Ext.getCmp('bidding_grid');
//                                            grid.getStore().reload();
//                                        }
//                                    }
//                                }
//                            },
//                            {
//                                xtype: 'button',
//                                id: 'buttonFinishBid',
//                                icon: 'images/dollar16x16.png',
//                                text: 'סיום הצעת מחיר',
//                                listeners: {
//                                    click: {
//                                        fn: function(){
//                                            var grid = Ext.getCmp('bidding_grid');
////                                            var checkboxSelection = grid.getSelectionModel().getSelection();
//                                            var bidVendor = Ext.getCmp('txtBidVendor').value;
//                                            var bidVendorQuality = Ext.getCmp('txtBidVendorQuality').value;
//
//                                            var gridVars = '';
//                                            for (i=0; i<=grid.getStore().getCount()-1; i++){
//                                                gridVars = gridVars + 
//                                                      grid.getStore().getAt(i).get('bid_id') + "," +  
//                                                      bidVendorQuality + "," +
//                                                      grid.getStore().getAt(i).get('operator_prefix') + "," +
//                                                      grid.getStore().getAt(i).get('billing') + "," +
//                                                      grid.getStore().getAt(i).get('currency') + "," +
//                                                      grid.getStore().getAt(i).get('buy_rate') + "," +
//                                                      grid.getStore().getAt(i).get('sell_rate') + "," +
//                                                      grid.getStore().getAt(i).get('rate_date') + "," +
//                                                      grid.getStore().getAt(i).get('quality') + "," +
//                                                      grid.getStore().getAt(i).get('priority') + "," +
//                                                      grid.getStore().getAt(i).get('weight') + "," +
//                                                      grid.getStore().getAt(i).get('status') + "," +
//                                                      bidVendor + "," +
//                                                      grid.getStore().getAt(i).get('vendor_name') + "," + 
//                                                      grid.getStore().getAt(i).get('country_name') +  
//                                                        ";"; 
//                                            }
//
//                                            Ext.Ajax.request({
//                                                url: 'AjaxActions.jsp',
//                                                method : 'Post', 
//                                                params: {
//                                                    action: 'create_and_send_excel',
//                                                    bid_id: grid.getStore().getAt(0).get('bid_id'), 
//                                                    grid_vars: gridVars,
//                                                    buying_vendor: buyingVendor,
//                                                    buying_vendor_quality: buyingVendorQuality
//                                                }
//                                            });
//                                            alert("Bid Sent To Email");
//                                        }
//                                    }
//                                }
//                            }
                        ]
                    }
            ],
            
            items:  [{
//                id: 'bidding_grid',
//                xtype: 'gridpanel',
//                //title: 'FinnishBid',
//                autoShow: false,
//                autoScroll: true,
//                selModel: checkBoxBidTab,
//                store:  Ext.create('Ext.data.Store', {
//                    fields:[
//                    {name: 'id', type: 'int', sortType: 'asInt'},
//                    {name: 'bid_id', type: 'int', sortType: 'asInt'},
//                    {name: 'rate_date'}, //, type: 'Date' , sortType: 'asDate', format: 'Y-m-d h:M:s'
//                    {name: 'country_name'},
//                    {name: 'country_code', type: 'int', sortType: 'asInt'},
//                    {name: 'operator_prefix', type: 'int', sortType: 'asInt'},
//                    {name: 'vendor_name'},
//                    {name: 'currency'},
//                    {name: 'buy_rate', type: 'float', sortType: 'asFloat'},
//                    {name: 'sell_rate', type: 'float', sortType: 'asFloat'},
//                    {name: 'quality'},
//                    {name: 'billing'},
//                    {name: 'priority', type: 'int', sortType: 'asInt'},
//                    {name: 'weight'},
//                    {name: 'status'},
//                    {name: 'info'}
//                    ],
//                    proxy: {
//                        type: 'ajax',
//                        timeout: 120000,
//                        url: v_url,
//                        reader: {
//                            type: 'json',
//                            root: 'data',
//                            successProperty: 'success'
//                        }
//                    },
//                    autoLoad: true
//                }),
//                plugins: [
//                    Ext.create('Ext.grid.plugin.RowEditing', {
//                        clicksToEdit: 2
//                    })
//                ],
//                columns: [
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'id',
//                    width: 40,
//                    text: 'Id'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'bid_id',
//                    width: 45,
//                    text: 'Bid Id'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'rate_date',
//                    width: 70,
//                    text: 'Date',
//                    renderer: Ext.util.Format.dateRenderer('Y-m-d'),
//                    editor: 'textfield'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'country_name',
//                    width: 110,
//                    text: 'Country'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'operator_prefix',
//                    width: 40,
//                    text: 'Prefix'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'vendor_name',
//                    width: 100,
//                    text: 'Vendor Name'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'currency',
//                    width: 60,
//                    text: 'Currency',
//                    editor: 'textfield'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'buy_rate',
//                    width: 60,
//                    text: 'Buy Rate'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'sell_rate',
//                    width: 60,
//                    text: 'Sell Rate',
//                    editor: 'textfield'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'quality',
//                    width: 100,
//                    text: 'Quality'
//                },
//                {
//                    xtype: 'gridcolumn',
//                    dataIndex: 'billing',
//                    width: 40,
//                    text: 'Billing',
//                    editor: 'textfield'
//                },
//                {
//                    header   : 'Priority',
//                    width    : 50,
//                    fixed    : true,
//                    hideable : false,
//                    dataIndex: 'priority',
//                    editor   : {xtype:'combo',
//                        displayField:'priority',
//                        store: new Ext.data.SimpleStore({
//                            fields: ['priority'],
//                            data : [
//                                [1],
//                                [2],
//                                [3],
//                                [4],
//                                [5],
//                                [6]
//                            ]
//                        })
//                    }
//                },  
//                {
//                    header   : 'Weight',
//                    width    : 50,
//                    fixed    : true,
//                    hideable : false,
//                    dataIndex: 'weight',
//                    editor   : {xtype:'combo',
//                        displayField:'weight',
//                        store: new Ext.data.SimpleStore({
//                            fields: ['weight'],
//                            data : [
//                                ['15%'],
//                                ['20%'],
//                                ['30%'],
//                                ['50%'],
//                                ['100%']
//                            ]
//                        })
//                    }
////                    renderer: function(val, meta, record){
////                        if(val) return val;
////                        return '100';
////                    } 
//                },  
//                {
//                    header   : 'Status',
//                    width    : 80,
//                    fixed    : true,
//                    hideable : false,
//                    dataIndex: 'status',
//                    editor   : {xtype:'combo',
//                        displayField:'status',
//                        store: new Ext.data.SimpleStore({
//                            fields: ['status'],
//                            data : [
//                                ['NO CHANGE'],
//                                ['OPEN'],
//                                ['CLOSE'],
//                                ['']
//                            ]
//                        })
//                    }
////                    renderer: function(val, meta, record){
////                        if(val) return val;
////                        return 'NO CHANGE';
////                    }        
//                },  
//                {
//                    xtype: 'actioncolumn',
//                    width: 30,
//                    sortable: false,
//                    menuDisabled: true,
//                    items: [{
//                        icon: 'images/V16x16.png',
//                        scope: this,
//                        handler:  function(view, rowIndex, colIndex, item, e, record){
//                            var grid =  Ext.getCmp("bidding_grid");
//                            var innerBidSelectionRow = grid.getSelectionModel().getSelection();
//                            var temp = '';
//                            for (i=0; i<=innerBidSelectionRow.length-1; i++){
//                                temp = temp + innerBidSelectionRow[i].get('id') + 
//                                                ";";
//                            }
//                            
//                            Ext.Ajax.request({
//                                url: 'AjaxActions.jsp',
//                                method : 'Post', 
//                                params: {
//                                    action: 'multiple_update_sell_rate',
//                                    grid_vars: temp,
//                                    sell_rate: record.get('sell_rate'),
//                                    currency: record.get('currency'),
//                                    priority: record.get('priority'),
//                                    weight: record.get('weight'),
//                                    status: record.get('status'),
//                                    billing: record.get('billing'),
//                                    rate_date: record.get('rate_date')
//                                }
//                            });
//                            Ext.getCmp('bidding_grid').getStore().reload();   
//                            alert('Sell Rate Updated');
//                        }
//                    }]
//                },
//                {
//                    xtype: 'actioncolumn',
//                    width: 30,
//                    sortable: false,
//                    menuDisabled: true,
//                    items: [{
//                        icon: 'images/delete.png',
//                        scope: this,
//                        handler:  function(view, rowIndex, colIndex, item, e, record){
//                            var grid =  Ext.getCmp("bidding_grid");
//                            grid.getStore().removeAt(rowIndex);
//                            
//                            Ext.Ajax.request({
//                                url: 'AjaxActions.jsp',
//                                method : 'Post', 
//                                params: {
//                                    action: 'delete_bid_row',
//                                    id: record.get("id")
//                                }
//                            });
//                        }
//                    }]
//                    }
//                ]
            }
            ]
            
        });
        
        var panel = Ext.getCmp("MainTabPanelID");
        panel.remove('bidding_panel');
        panel.add(newTab).show();

    },
    
    onBtnBiddingHistoryClick: function(button, e, options){
        var me = this;
//        var checkBoxBidHistoryTab = Ext.create('Ext.selection.CheckboxModel');
        var vendor = Ext.getCmp('txtBidVendor').value;
        var vendorQuality = Ext.getCmp('txtBidVendorQuality').value;
        var v_url = 'GetBiddingHistory.jsp?' + Ext.urlEncode({'bid_vendor': vendor, 'bid_vendor_quality': vendorQuality} );

        var newTab = Ext.create('Ext.panel.Panel', {
            id: 'bidding_history_panel',
            title: 'Bidding History',
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnRefreshBidHistoryId',
                            icon: 'images/refresh16x16.png',
                            text: 'רענון',
                            listeners: {
                                click: {
                                    fn: function(button, e, options) {
                                        var grid = Ext.getCmp('bidding_history_grid');
                                        grid.getStore().reload();
                                    }
                                }
                            }
                        }
//                        {
//                            xtype: 'button',
//                            id: 'btnApprovedBidId',
//                            icon: 'images/V16x16.png',
//                            text: 'מאושר',
//                            listeners: {
//                                click: {
//                                    fn: me.onbtnApproveBidClick,
//                                    scope: me
//                                }
//                            }
//                        },
//                        {
//                            xtype: 'button',
//                            id: 'btnNotApprovedBidId',
//                            icon: 'images/X16-16.png',
//                            text: 'לא מאושר',
//                            listeners: {
//                                click: {
//                                    fn: me.onbtnNotApproveBidClick,
//                                    scope: me
//                                }
//                            }
//                        },
//                        {
//                            xtype: 'button',
//                            id: 'btnSaveBiddingHistoryId',
//                            icon: 'images/save.png',
//                            text: 'עדכן Route',
//                            listeners: {
//                                click: {
//                                    fn: me.onbtnSaveBiddingHistoryClick,
//                                    scope: me
//                                }
//                            }
//                        }
                    ]
                }
            ],
            items:  [{
                id: 'bidding_history_grid',
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields:[
                    {name: 'bid_id', type: 'int', sortType: 'asInt'},
                    {name: 'bid_date', type: 'Date' , sortType: 'asDate', format: 'Y-m-d h:M:s'},
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                columns: [
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'bid_id',
                        width: 70,
                        text: 'Bid Id'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'bid_date',
                        width: 130,
                        text: 'Bid Date',
                        renderer: Ext.util.Format.dateRenderer('Y-m-d h:i:s')
                    },
                    {
                    xtype: 'actioncolumn',
                    width: 30,
                    sortable: false,
                    menuDisabled: true,
                    items: [{
                        icon: 'images/glass.png',
                        scope: this,
                        handler: this.onCheckBidClick
                    }]
                    },
                    {
                        xtype: 'actioncolumn',
                        width: 30,
                        sortable: false,
                        menuDisabled: true,
                        items: [{
                            icon: 'images/Plus.png',
                            scope: this,
                            handler:  function(view, rowIndex, colIndex, item, e, record){
                                
//                                if(typeof Ext.getCmp('bidding_grid') === 'undefined'){ 
//                                    alert('Please start a bid first!');
//                                }
//                                else{
                                    Ext.Ajax.request({
                                    url: 'AjaxActions.jsp',
                                    method : 'Post', 
                                    params: {
                                        action: 'add_bid_from_history',
                                        id: record.get("bid_id")
                                        }
                                    });
                                    
//                                    Ext.getCmp('bidding_grid').getStore().reload();
                                    alert('Added to bid');
//                                }
                            }
                        }]
                    }
                ]
            }]
        });
        
        var panel = Ext.getCmp("MainTabPanelID");
        panel.remove('bidding_history_panel');
        panel.add(newTab).show();
    },
    
    onCheckBidClick: function(view, rowIndex, colIndex, item, e, record){
        var me = this;
        var bid_id = record.get('bid_id');
        var v_url = 'GetBid.jsp?' + Ext.urlEncode({'bid_id': bid_id} );
        
        
        var newTab = Ext.create('Ext.panel.Panel', {
            id: 'bid_hitory_panel',
            title: 'Bid ID ' + bid_id,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            items:  [{
                id: 'bid_hitory_grid',
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields:[
                    {name: 'rate_date', type: 'Date' , sortType: 'asDate', format: 'Y-m-d h:M:s'},
                    {name: 'country_name'},
                    {name: 'country_code', type: 'int', sortType: 'asInt'},
                    {name: 'operator_prefix', type: 'int', sortType: 'asInt'},
                    {name: 'vendor'},
                    {name: 'currency'},
                    {name: 'buy_rate', type: 'float', sortType: 'asFloat'},
                    {name: 'sell_rate', type: 'float', sortType: 'asFloat'},
                    {name: 'quality'},
                    {name: 'billing'},
                    {name: 'priority', type: 'int', sortType: 'asInt'},
                    {name: 'weight'},
                    {name: 'status'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'rate_date',
                    width: 80,
                    text: 'Date',
                    renderer: Ext.util.Format.dateRenderer('Y-m-d')
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'country_name',
                    width: 100,
                    text: 'Country Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'country_code',
                    width: 100,
                    text: 'Country Code'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'operator_prefix',
                    width: 100,
                    text: 'Operator Prefix'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'vendor',
                    width: 100,
                    text: 'Vendor Name'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'currency',
                    width: 100,
                    text: 'Currency'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'buy_rate',
                    width: 70,
                    text: 'Buy Rate'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'sell_rate',
                    width: 70,
                    text: 'Sell Rate'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'quality',
                    width: 100,
                    text: 'Quality'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'billing',
                    width: 70,
                    text: 'Billing'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'priority',
                    width: 70,
                    text: 'Priority'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'weight',
                    width: 70,
                    text: 'Weight'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'status',
                    width: 70,
                    text: 'Status'
                }
                ]
            }]
        });
        
        var panel = Ext.getCmp("MainTabPanelID");
        panel.remove('bid_hitory_panel');
        panel.add(newTab).show();
    },        
            
    onbtnApproveBidClick: function(button, e, options){
        var grid = Ext.getCmp('bidding_history_grid');
        var checkboxSelection = grid.getSelectionModel().getSelection();
        var vendorID = Ext.getCmp('bidVendorID').value;
        var temp = '';
        for (i=0; i<=checkboxSelection.length-1; i++){
            temp = temp + checkboxSelection[i].get('bid_id') +  
                    ";";
        }

        Ext.Ajax.request({
            url: 'AjaxActions.jsp',
            method : 'Post', 
            params: {
                action: 'approve_bids',
                approved: 'YES',
                bid_vendor_id: vendorID,
                grid_vars: temp 
            }
        });
        
        alert('Bid Changed To Approved');
//        var grid = Ext.getCmp('bidding_history_grid');
//        grid.getStore().reload();
        
    },
            
    onbtnNotApproveBidClick: function(button, e, options){
        var grid = Ext.getCmp('bidding_history_grid');
        var checkboxSelection = grid.getSelectionModel().getSelection();
        var temp = '';
        for (i=0; i<=checkboxSelection.length-1; i++){
            temp = temp + checkboxSelection[i].get('bid_id') +  
                    ";";
        }

        Ext.Ajax.request({
            url: 'AjaxActions.jsp',
            method : 'Post', 
            params: {
                action: 'approve_bids',
                approved: 'NO',
                grid_vars: temp 
            }
        });
        alert('Bid Changed To Not Approved');
    },
            
    onbtnSaveBiddingHistoryClick: function(button, e, options){
        var grid = Ext.getCmp('bidding_history_grid');
        var checkboxSelection = grid.getSelectionModel().getSelection();
        var temp = '';
        for (i=0; i<=checkboxSelection.length-1; i++){
            temp = temp + checkboxSelection[i].get('route') + ","  +
                    checkboxSelection[i].get('bid_id')  +
                    ";";
        }

        Ext.Ajax.request({
            url: 'AjaxActions.jsp',
            method : 'Post', 
            params: {
                action: 'update_bid',
                grid_vars: temp 
            }
        });
        alert('Route Updated');
    },       
    
    
    
    
    
    onBtnRoutesAddClick: function(){
        var routeVendor = Ext.getCmp('txtRouteVendor').value;
        var routeVendorQuality = Ext.getCmp('txtRouteVendorQuality').value;
        var routeCountryCode = Ext.getCmp('txtRouteCountry').value;
        
        
        if(routeVendorQuality === null){ //
            routeVendorQuality = 0;
        }
        
        if(routeVendor === null){ //
            alert('Insert Vendor Id');
        }
        
        else if(routeCountryCode === null){
            alert('Insert Country Code');
        }
        
        else{
            Ext.Ajax.request({
                url: 'AjaxActions.jsp',
                method : 'Post', 
                params: {
                    action: 'add_route_vendor',
                    route_quality: routeVendorQuality,
                    route_country_code: routeCountryCode,
                    route_vendor: routeVendor
                }
            });
            alert('Route Added');
        }
    }, 
    
    onBtnRoutesSearchClick: function(button, e, options){
        var me = this;
        var routeVendor = Ext.getCmp('txtRouteVendor').value;
        var routeVendorQuality = Ext.getCmp('txtRouteVendorQuality').value;
        var routeCountry = Ext.getCmp('txtRouteCountry').value;
        var v_url = 'GetRoutes.jsp?' + Ext.urlEncode({'route_vendor_quality': routeVendorQuality, 'route_country' : routeCountry , 'route_vendor' : routeVendor});
        
        var newTab = Ext.create('Ext.panel.Panel', {
            id: 'routes_pannel',
            title: 'Routes',
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnRefreshRoutesId',
                            icon: 'images/refresh16x16.png',
                            text: 'רענון',
                            listeners: {
                                click: {
                                    fn: function(button, e, options) {
                                        var grid = Ext.getCmp('routes_grid');
                                        grid.getStore().reload();
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            items:  [{
                id: 'routes_grid',
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields:[
                    {name: 'id', type: 'int', sortType: 'asInt'},
                    {name: 'buying_vendor'},
                    {name: 'country'},
                    {name: 'buyying_quality'},
                    {name: 'route_id', type: 'int', sortType: 'asInt'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                plugins: [
                    Ext.create('Ext.grid.plugin.RowEditing', {
                        clicksToEdit: 2
                    })
                ],
                columns: [
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'id',
                        width: 50,
                        text: 'Id'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'buying_vendor',
                        width: 100,
                        text: 'Buying Vendor'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'country',
                        width: 100,
                        text: 'Country'
                    },
                    {
                    xtype: 'gridcolumn',
                    dataIndex: 'buyying_quality',
                    width: 120,
                    text: 'Buying Quality'
                    },
                    {
                    xtype: 'gridcolumn',
                    dataIndex: 'route_id',
                    width: 80,
                    text: 'Route',
                    editor: 'textfield'
                    },
                    {
                    xtype: 'actioncolumn',
                    width: 30,
                    sortable: false,
                    menuDisabled: true,
                    items: [{
                        icon: 'images/glass.png',
                        scope: this,
                        handler: this.onRouteClick
                    }]
                    },
                    {
                    xtype: 'actioncolumn',
                    width: 30,
                    sortable: false,
                    menuDisabled: true,
                    items: [{
                        icon: 'images/delete.png',
                        scope: this,
                        handler:  function(view, rowIndex, colIndex, item, e, record){
                            var grid =  Ext.getCmp("routes_grid");

                            Ext.Ajax.request({
                                url: 'AjaxActions.jsp',
                                method : 'Post', 
                                params: {
                                    action: 'remove_route',
                                    id: record.get("id")
                                }
                            });

                            grid.getStore().removeAt(rowIndex);
                        }
                    }]
                    },
                    {
                        xtype: 'actioncolumn',
                        width: 30,
                        sortable: false,
                        menuDisabled: true,
                        items: [{
                            icon: 'images/save.png',
                            scope: this,
                            handler:  function(view, rowIndex, colIndex, item, e, record){
                                var grid =  Ext.getCmp("routes_grid");

                                Ext.Ajax.request({
                                    url: 'AjaxActions.jsp',
                                    method : 'Post', 
                                    params: {
                                        action: 'save_route',
                                        id: record.get("id"),
                                        route_id: record.get("route_id")
                                    }
                                });
                                alert("Route Saved");
                            }
                        }]
                    }
                ]
            }]
        });
        
        var panel = Ext.getCmp("MainTabPanelID");
        panel.remove('routes_pannel');
        panel.add(newTab).show();

    },
          
    onRouteClick: function(view, rowIndex, colIndex, item, e, record)   {
        var me = this;
        var idRoutesVendor = record.get('id');
        var routhBuyingVendor = record.get('buying_vendor');
        var routhCountry = record.get('country');
        var routhBuyingVendorQuality = record.get('buyying_quality');
        var routhId = record.get('route_id');
        var v_url = 'GetRoute.jsp?' + Ext.urlEncode({'id_routes_vendor': idRoutesVendor});
        
        var newTab = Ext.create('Ext.panel.Panel', {
            id: 'route_inner_pannel',
            title: 'Route ' + routhBuyingVendor + ', ' + routhCountry + ', ' + routhBuyingVendorQuality,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnRefreshInnerRoutesId',
                            icon: 'images/refresh16x16.png',
                            text: 'רענון',
                            listeners: {
                                click: {
                                    fn: function(button, e, options) {
                                    var grid = Ext.getCmp('routes_inner_grid');
                                    grid.getStore().reload();
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'buttonInnerRouteAdd',
                            icon: 'images/Plus.png',
                            text: 'הוסף שורה',
                            listeners: {
                                click: {
                                    fn: function(){
                                        var grid =  Ext.getCmp("routes_inner_grid");
                                        grid.getStore().add({id_routes_vendor: idRoutesVendor, buying_vendor: routhBuyingVendor , country: routhCountry , buying_vendor_quality: routhBuyingVendorQuality, route_id: routhId});
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'buttonSaveInnerRoute',
                            icon: 'images/save.png',
                            text: 'שמור',
                            listeners: {
                                click: {
                                    fn: function(){
                                        var grid = Ext.getCmp('routes_inner_grid');

                                        var temp = '';
                                        for (i=0; i<=grid.getStore().getCount()-1; i++){
                                            temp = temp + grid.getStore().getAt(i).get("id_routes_vendor") + "," +
                                                   grid.getStore().getAt(i).get("prefix") + "," +
                                                   grid.getStore().getAt(i).get("priority") + "," +
                                                   grid.getStore().getAt(i).get("weight") + "," +
                                                   grid.getStore().getAt(i).get("selling_vendor_quality") + "," +
                                                   grid.getStore().getAt(i).get("route_id") + "," +
                                                   grid.getStore().getAt(i).get("buying_vendor") + "," +
                                                   grid.getStore().getAt(i).get("buying_vendor_quality") + "," +
                                                   grid.getStore().getAt(i).get("selling_vendor") + "," +
                                                   grid.getStore().getAt(i).get("id_routes_vendor") + "," +
                                                   grid.getStore().getAt(i).get("country") + 
                                                   ";";
                                        }

                                        Ext.Ajax.request({
                                            url: 'AjaxActions.jsp',
                                            method : 'Post', 
                                            params: {
                                                action: 'save_inner_route',
                                                grid_vars: temp,
                                                id_routes_vendor: idRoutesVendor
                                            }
                                        });

                                        alert('Route Saved');
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'buttonSendRoute',
                            icon: 'images/Send.png',
                            text: 'שלח',
                            listeners: {
                                click: {
                                    fn: function(){
                                        var grid = Ext.getCmp('routes_inner_grid');

                                        var temp = '';
                                        for (i=0; i<=grid.getStore().getCount()-1; i++){
                                            temp = temp + grid.getStore().getAt(i).get("prefix") + "," +
                                                   grid.getStore().getAt(i).get("selling_vendor_id") + "," +
                                                   grid.getStore().getAt(i).get("priority") + "," +
                                                   grid.getStore().getAt(i).get("weight") + "," +
                                                   grid.getStore().getAt(i).get("quality") + 
                                                   ";";
                                        }

                                        Ext.Ajax.request({
                                            url: 'AjaxActions.jsp',
                                            method : 'Post', 
                                            params: {
                                                action: 'send_route',
                                                grid_vars: temp,
                                                route_country_code: routhCountryCode,
                                                route_vendor_id: routhBuyingVendorId,
                                                    route_buying_vendor_quality: routhBuyingVendorQuality
                                            }
                                        });

                                        alert('Email Sent');
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            items:  [{
                id: 'routes_inner_grid',
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields:[
                    {name: 'id_routes_vendor', type: 'int', sortType: 'asInt'},
                    {name: 'buying_vendor'},
                    {name: 'buying_vendor_quality'},
                    {name: 'country'},
                    {name: 'prefix', type: 'int', sortType: 'asInt'},
                    {name: 'selling_vendor'},
                    {name: 'priority', type: 'int', sortType: 'asInt'},
                    {name: 'weight', type: 'float', sortType: 'asFloat'},
                    {name: 'selling_vendor_quality'},
                    {name: 'route_id', type: 'int', sortType: 'asInt'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                plugins: [
                    Ext.create('Ext.grid.plugin.RowEditing', {
                        clicksToEdit: 2
                    })
                ],
                columns: [
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'id_routes_vendor',
                        width: 30,
                        text: 'Id'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'buying_vendor',
                        width: 100,
                        text: 'Buying Vendor'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'buying_vendor_quality',
                        width: 130,
                        text: 'Buying Vendor Quality'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'country',
                        width: 100,
                        text: 'Country'
                    },
                    {
                    xtype: 'gridcolumn',
                    dataIndex: 'prefix',
                    width: 80,
                    text: 'Prefix',
                    editor: 'textfield'
                },
                    {
                        header   : 'Vendor',
                        width    : 100,
                        fixed    : true,
                        hideable : false,
                        dataIndex: 'selling_vendor',
                        editor   : {xtype:'combo',
                            displayField:'vendor_name',
                            store:  Ext.create('Ext.data.Store', {
                                fields:[
                                    {name: 'vendor_name'}
                                ],
                                proxy: {
                                    type: 'ajax',
                                    timeout: 120000,
                                    url: 'GetVendors.jsp',
                                    reader: {
                                        type: 'json',
                                        root: 'data',
                                        successProperty: 'success'
                                    }
                                },
                                autoLoad: true
                            }),
                            listeners: {
                                select: function(combo, selection) {
                                    if (combo.getValue()) {
                                        Ext.getCmp('routeGridSellingVendorQuality').getStore().getProxy().url =  'GetVendorQuality.jsp?' + Ext.urlEncode({'bid_vendor': combo.getValue()});
                                        Ext.getCmp('routeGridSellingVendorQuality').getStore().reload();
                                    }
                                },
                                change: function() {
                                    var store = this.store;
                                    store.clearFilter();

                                    if (this.getValue() !== null){
                                        store.filter({
                                            property: 'rate_desc',
                                            anyMatch: true,
                                            value   : this.getValue()
                                        });
                                    }
                                }
                            }
                        }
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'priority',
                        width: 80,
                        text: 'Priority',
                        editor: 'textfield'
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'weight',
                        width: 80,
                        text: 'Weight',
                        editor: 'textfield'
                    },
                    {
                        header   : 'Quality',
                        width    : 100,
                        fixed    : true,
                        hideable : false,
                        dataIndex: 'selling_vendor_quality',
                        editor   : {xtype:'combo',
                            id: 'routeGridSellingVendorQuality',
                            displayField:'rate_desc',
                            store:  Ext.create('Ext.data.Store', {
                                fields:[
                                    {name: 'rate_desc'}
                                ],
                                proxy: {
                                    type: 'ajax',
                                    timeout: 120000,
                                    url: '',
                                    reader: {
                                        type: 'json',
                                        root: 'data',
                                        successProperty: 'success'
                                    }
                                },
                                autoLoad: true
                            }),
                            listeners: {
                                change: function() {
                                    var store = this.store;
                                    store.clearFilter();

                                    if (this.getValue() !== null){
                                        store.filter({
                                            property: 'vendor_name',
                                            anyMatch: true,
                                            value   : this.getValue()
                                        });
                                    }
                                }
                            }
                        }
                    },
                    {
                        xtype: 'gridcolumn',
                        dataIndex: 'route_id',
                        width: 80,
                        text: 'Route'
                    },
                    {
                    xtype: 'actioncolumn',
                    width: 30,
                    sortable: false,
                    menuDisabled: true,
                    items: [{
                        icon: 'images/delete.png',
                        scope: this,
                        handler:  function(view, rowIndex, colIndex, item, e, record){
                            var tmp =  Ext.getCmp("routes_inner_grid");
                            tmp.getStore().removeAt(rowIndex);
                        }
                    }]
                    }
                ]
            }]
        });
        
        var panel = Ext.getCmp("MainTabPanelID");
        panel.remove('route_inner_pannel');
        panel.add(newTab).show();

    }, 
            
    onIncomingGridpanelCellDblClick: function(tablepanel, td, cellIndex, record, tr, rowIndex, e, options) {
        var title =  record.getData().country_name + '(' + record.getData().country_desc + ') " - Today';
        var v_url = 'GetIncomingDetails.jsp?' + Ext.urlEncode({'country_code': record.getData().country_code, 'operator_prefix' : record.getData().operator_prefix, 'owner_in' : record.getData().trunk_owner} );
        var newTab = Ext.create('Ext.panel.Panel', {
            title: title,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            items:  [{
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields: [
                    {name: 'call_date'},
                    {name: 'owner_in'},
                    {name: 'trunk_in'},           
                    {name: 'owner_out'},
                    {name: 'trunk_out'},
                    {name: 'acd', type: 'float'},
                    {name: 'asr', type: 'float'},
                    {name: 'calls', type: 'int'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                title: 'Incoming information for "' + record.getData().country_name + '" - Today' ,
                /*
                viewConfig: {

                getRowClass: function(record, rowIndex, rowParams, store) {
                var acd_h = record.get('acd_h');
                var acd_m = record.get('acd_m');
                if (acd_h < acd_m - 1){
                return 'price-fall';
                }
                }
                },

                call_date
                owner_in
                trunk_in
                owner_out
                trunk_out
                acd
                asr
                calls

                */
                columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'call_date',
                    width: 150,
                    text: 'Call Date'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'owner_in',
                    width: 150,
                    align: 'right',
                    text: 'Owner IN'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'trunk_in',
                    align: 'right',
                    width: 200,
                    text: 'Trunk in'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'owner_out',
                    width: 150,
                    align: 'right',
                    text: 'Owner OUT'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'trunk_out',
                    align: 'right',
                    width: 200,
                    text: 'Trunk OUT'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'acd',
                    width: 50,
                    text: 'ACD'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'asr',
                    width: 50,
                    text: 'ASR'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'calls',
                    width: 50,
                    text: 'Calls'
                }]
            }]
        });

        var panel = Ext.getCmp("MainTabPanelID");
        panel.add(newTab).show();

    },
            
    onOutcomingGridpanelCellDblClick: function(tablepanel, td, cellIndex, record, tr, rowIndex, e, options) {
        var title =  record.getData().country_name + ', ' + record.getData().operator_prefix;
        var v_url = 'GetOutgoingDetails.jsp?' + Ext.urlEncode({'country_code': record.getData().country_code, 'operator_prefix' : record.getData().operator_prefix} );
        var newTab = Ext.create('Ext.panel.Panel', {
            title: title,
            autoScroll: true,
            layout: {
                type: 'fit'
            },
            closable: true,
            items:  [{
                xtype: 'gridpanel',
                autoShow: false,
                autoScroll: true,
                store:  Ext.create('Ext.data.Store', {
                    fields: [
                    {name: 'call_date'},
                    {name: 'trunk_owner'},
                    {name: 'trunk_out'},
                    {name: 'acd_h', type: 'float'},
                    {name: 'acd_m', type: 'float'},
                    {name: 'asr_h', type: 'float'},
                    {name: 'asr_m', type: 'float'},
                    {name: 'mins_h', type: 'float'},
                    {name: 'mins_m', type: 'float'}
                    ],
                    proxy: {
                        type: 'ajax',
                        timeout: 120000,
                        url: v_url,
                        reader: {
                            type: 'json',
                            root: 'data',
                            successProperty: 'success'
                        }
                    },
                    autoLoad: true
                }),
                title: 'General Data for "' + record.getData().country_name + '" - Today' ,
                viewConfig: {
                    getRowClass: function(record, rowIndex, rowParams, store) {
                        var acd_h = record.get('acd_h');
                        var acd_m = record.get('acd_m');
                        if (acd_h < acd_m - 1){
                            return 'price-fall';
                        }
                    }
                },
                columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'call_date',
                    width: 150,
                    text: 'Hour'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'trunk_owner',
                    width: 150,
                    text: 'Trunk Owner'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'trunk_out',
                    width: 200,
                    text: 'Trunk Out'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'acd_h',
                    width: 70,
                    text: 'ACD Hourly'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'acd_m',
                    width: 70,
                    text: 'ACD Monthly'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'asr_h',
                    width: 70,
                    text: 'ASR Hourly'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'asr_m',
                    width: 70,
                    text: 'ASR Monthly'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'mins_h',
                    width: 70,
                    text: 'Minutes H'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'mins_m',
                    width: 70,
                    text: 'Minutes M'
                }]
            }]
        });

        var panel = Ext.getCmp("MainTabPanelID");
        panel.add(newTab).show();

    }
    
});